// ================================================================== //

			// MIXINS LIBRARY - EASILY SASS (_gmixin)
			// CREATED BY: GABRIEL PADUA <C#D&R STR@NG&>
			// TO INSTANCE IN SASS FILE
			// EXTENSION: .scss @include mixin_name(parameters)
			// EXTENSION: .sass +mixin_name(parameters)

// ================================================================== //


//* BREAKPOINTS ================ */
$breaks: (
	"tablet": 900px,
	 "phone": 400px
);

//* VARS ================== */
$preto  : #000;
$branco : #fff;


/* MIXINS ============= */
@mixin total() {
	width: 100%;
	float: left;
}

@mixin box-display($size) {
	         width: $size;
	       display: inline-block;
	vertical-align: middle;
	     font-size: 0;
}


@mixin radius($radius) {
	-webkit-border-radius: $radius / 16 + rem;
	   -moz-border-radius: $radius / 16 + rem;
	    -ms-border-radius: $radius / 16 + rem;
	        border-radius: $radius / 16 + rem;
}

@mixin fontGeneral($size, $color, $style, $weigth) {
	  font-size: $size;
	      color: $color;
	 font-style: $style;
	font-weight: $weight;
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
     content: $content;
     display: $display;
    position: $pos;
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}


@mixin breakpoint($width, $type) {
	@if map_has_key($breaks, $width) {
		$width: map_get($breaks, $width);
	}
	@media screen and (#{$type}-width: $width) {
		@content;
	}
}


@mixin transitions ($attr, $time: 0.3s, $tipe: ease) {
	  -moz-transitions: $attr $time $tipe;
	     -o-transition: $attr $time $tipe;
	-webkit-transition: $attr $time $tipe;
	        transition: $attr $time $tipe;
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}


@mixin background-all($color, $image: none, $positions: top center, $size: initial, $repeat: no-repeat, $attachment: initial) {
	     background-color: $color;
	     background-image: $image;
	  background-position: $positions;
	      background-size: $size;
	    background-repeat: $repeat;
	background-attachment: $attachment;
}

@mixin box-shadow-all($horizontal, $vertical, $blur, $radius, $color: rgba(0, 0, 0, 0.70), $direction: default) {

	@if $direction == inset {
		-webkit-box-shadow: inset $horizontal $vertical $blur $radius $color;
		   -moz-box-shadow: inset $horizontal $vertical $blur $radius $color;
		        box-shadow: inset $horizontal $vertical $blur $radius $color;
	} @else {
		-webkit-box-shadow: $horizontal $vertical $blur $radius $color;
		   -moz-box-shadow:  $horizontal $vertical $blur $radius $color;
		        box-shadow:  $horizontal $vertical $blur $radius $color;
	}

}



/* FUNCTIONS ================== */
@function calcRem($px) {
	@return $px / 16 + rem;
}

